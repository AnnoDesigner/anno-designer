using System;
using System.Collections.Generic;
using AnnoDesigner.Core.Presets.Models;
using AnnoDesigner.Models;
using NLog;

namespace AnnoDesigner.Localization
{
    public class TreeLocalization : ILocalizationHelper
    {
        private static readonly Logger _logger = LogManager.GetCurrentClassLogger();

        private readonly ICommons _commons;
        //This container is generated by the following Google Spreadsheet:
        //https://docs.google.com/spreadsheets/d/1CjECty43mkkm1waO4yhQl1rzZ-ZltrBgj00aq-WJX4w/edit?usp=sharing 
        //Steps to create a new container
        //Run CreateDictionary Script
        //Copy Output
        //Replace the escaped characters (\t\r\n) with the actual characters from within an editor of your choice
        private readonly TreeLocalizationContainer _treeLocalizationContainer;

        private Dictionary<string, Dictionary<string, string>> _translations;

        public TreeLocalization(ICommons commonsToUse, TreeLocalizationContainer treeLocalizationContainerToUse)
        {
            _commons = commonsToUse;
            _treeLocalizationContainer = treeLocalizationContainerToUse;
        }

        private Dictionary<string, Dictionary<string, string>> Translations
        {
            get
            {
                if (_translations is null)
                {
                    _translations = GetTranslationsFromContainer();
                }

                return _translations;
            }
        }

        private Dictionary<string, Dictionary<string, string>> GetTranslationsFromContainer()
        {
            var result = new Dictionary<string, Dictionary<string, string>>();

            foreach (var curLanguage in _treeLocalizationContainer.Languages)
            {
                var tranlationsForCurrentLanguage = new Dictionary<string, string>();
                result.Add(curLanguage.LanguageCode, tranlationsForCurrentLanguage);

                foreach (var curTranslation in curLanguage.Translations)
                {
                    tranlationsForCurrentLanguage.Add(curTranslation.Key, curTranslation.Value);
                }
            }

            return result;
        }

        public string GetLocalization(string valueToTranslate)
        {
            return GetLocalization(valueToTranslate, null);
        }

        public string GetLocalization(string valueToTranslate, string languageCode = null)
        {
            if (string.IsNullOrWhiteSpace(languageCode))
            {
                languageCode = _commons.CurrentLanguageCode;
            }

            if (!_commons.LanguageCodeMap.ContainsValue(languageCode))
            {
                languageCode = "eng";
            }

            try
            {
                if (Translations[languageCode].TryGetValue(valueToTranslate.Replace(" ", string.Empty), out string foundLocalization))
                {
                    return foundLocalization;
                }
                else
                {
                    _logger.Trace($"try to set localization to english for: \"{valueToTranslate}\"");
                    if (Translations["eng"].TryGetValue(valueToTranslate.Replace(" ", string.Empty), out string engLocalization))
                    {
                        return engLocalization;
                    }
                    else
                    {
                        _logger.Trace($"found no localization (\"eng\") and ({languageCode}) for: \"{valueToTranslate}\"");
                        return valueToTranslate;
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.Error(ex, $"error getting localization ({languageCode}) for: \"{valueToTranslate}\"");
                return valueToTranslate;
            }
        }
    }
}