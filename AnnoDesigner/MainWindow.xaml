<Window x:Class="AnnoDesigner.MainWindow"
        x:Name="mainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:my="clr-namespace:AnnoDesigner"
        xmlns:coreModels="clr-namespace:AnnoDesigner.Core.Models;assembly=AnnoDesigner.Core"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:converter="clr-namespace:AnnoDesigner.Core.Converter;assembly=AnnoDesigner.Core"
        xmlns:modelPresetsTree="clr-namespace:AnnoDesigner.model.PresetsTree"
        xmlns:properties="clr-namespace:AnnoDesigner.Properties"
        xmlns:viewModel="clr-namespace:AnnoDesigner.viewmodel"
        xmlns:myBehaviors="clr-namespace:AnnoDesigner.Behaviors"
        mc:Ignorable="d"
        d:DataContext="{d:DesignInstance Type=viewModel:MainViewModel, IsDesignTimeCreatable=False}"
        d:DesignHeight="480"
        d:DesignWidth="640"
        Title="{Binding MainWindowTitle}"
        Icon="/AnnoDesigner;component/icon.ico"
        Height="{Binding MainWindowHeight, Mode=TwoWay}"
        Width="{Binding MainWindowWidth, Mode=TwoWay}"
        Top="{Binding MainWindowTop, Mode=TwoWay}"
        Left="{Binding MainWindowLeft, Mode=TwoWay}"
        WindowState="{Binding MainWindowWindowState, Mode=TwoWay}"
        MinHeight="480"
        MinWidth="640"
        Loaded="WindowLoaded"
        Closing="WindowClosing">
    <Window.Resources>
        <converter:BoolToVisibilityConverter x:Key="converterBoolToVisibility"
                                             TrueValue="Visible"
                                             FalseValue="Hidden" />
        <converter:BoolToVisibilityConverter x:Key="converterBoolToVisibilityCollapsed"
                                             TrueValue="Visible"
                                             FalseValue="Collapsed" />
        <xctk:ColorToSolidColorBrushConverter x:Key="converterColorToSolidColorBrush" />
        <HierarchicalDataTemplate DataType="{x:Type coreModels:AnnoObject}">
            <TextBlock Text="{Binding Label}" />
        </HierarchicalDataTemplate>
    </Window.Resources>
    <xctk:BusyIndicator x:Name="busyIndicator">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"
                                  MinWidth="100" />
                <ColumnDefinition Width="5" />
                <ColumnDefinition Width="Auto"
                                  MinWidth="100" />
            </Grid.ColumnDefinitions>

            <Menu Name="Menu"
                  Height="23"
                  VerticalAlignment="Top"
                  Grid.ColumnSpan="3">
                <Menu.Resources>
                    <Style TargetType="{x:Type MenuItem}">
                        <!--<Setter Property="Foreground"
                            Value="Black" />-->
                        <Style.Triggers>
                            <Trigger Property="IsEnabled"
                                     Value="False">
                                <Setter Property="Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Menu.Resources>
                <MenuItem Header="{Binding File}"
                          TabIndex="20">
                    <MenuItem Header="{Binding NewCanvas}"
                              Command="ApplicationCommands.New"
                              CommandTarget="{Binding ElementName=annoCanvas}" />
                    <MenuItem Header="{Binding Open}"
                              Command="ApplicationCommands.Open"
                              CommandTarget="{Binding ElementName=annoCanvas}" />
                    <MenuItem Header="{Binding Save}"
                              Command="ApplicationCommands.Save"
                              CommandTarget="{Binding ElementName=annoCanvas}" />
                    <MenuItem Header="{Binding SaveAs}"
                              Command="ApplicationCommands.SaveAs"
                              CommandTarget="{Binding ElementName=annoCanvas}" />
                    <Separator />
                    <MenuItem Header="{Binding CopyLayoutToClipboard}"
                              Command="{Binding CopyLayoutToClipboardCommand}" />
                    <MenuItem Header="{Binding LoadLayoutFromJson}"
                              Command="{Binding LoadLayoutFromJsonCommand}" />
                    <Separator />
                    <MenuItem Header="{Binding Exit}"
                              Command="{Binding CloseWindowCommand}"
                              CommandParameter="{Binding ElementName=mainWindow}" />
                </MenuItem>
                <MenuItem Header="{Binding Extras}"
                          TabIndex="21">
                    <!--<MenuItem Header="Prefer local presets" IsCheckable="True" IsEnabled="False" />
                <MenuItem Header="Apply automatic color scheme" IsEnabled="False" />-->
                    <MenuItem Header="{Binding Normalize}"
                              Command="{Binding CanvasNormalizeCommand}" />
                    <MenuItem Header="{Binding ResetZoom}"
                              Command="{Binding CanvasResetZoomCommand}" />
                    <Separator />
                    <MenuItem Header="{Binding RegisterFileExtension}"
                              Command="{Binding RegisterExtensionCommand}" />
                    <MenuItem Header="{Binding UnregisterFileExtension}"
                              Command="{Binding UnregisterExtensionCommand}" />
                </MenuItem>
                <MenuItem Header="{Binding Export}"
                          TabIndex="22">
                    <MenuItem Header="{Binding ExportImage}"
                              Command="{Binding ExportImageCommand}" />
                    <Separator />
                    <MenuItem Header="{Binding UseCurrentZoomOnExportedImage}"
                              IsCheckable="True"
                              IsChecked="{Binding UseCurrentZoomOnExportedImageValue}" />
                    <MenuItem Header="{Binding RenderSelectionHighlightsOnExportedImage}"
                              IsCheckable="True"
                              IsChecked="{Binding RenderSelectionHighlightsOnExportedImageValue}" />
                </MenuItem>
                <MenuItem Header="{Binding Language}"
                          TabIndex="23"
                          ItemsSource="{Binding Languages}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="MenuItem">
                            <Setter Property="Header"
                                    Value="{Binding Name}" />
                            <Setter Property="IsCheckable"
                                    Value="True" />
                            <Setter Property="IsChecked"
                                    Value="{Binding IsSelected, Mode=TwoWay}" />
                            <Setter Property="Command"
                                    Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=DataContext.LanguageSelectedCommand}" />
                            <Setter Property="CommandParameter"
                                    Value="{Binding}" />
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="{Binding ManageStats}"
                          TabIndex="24"
                          HorizontalAlignment="Right">
                    <MenuItem Header="{Binding ShowStats}"
                              IsCheckable="True"
                              IsChecked="{Binding StatisticsViewModel.IsVisible}"
                              Command="{Binding ShowStatisticsCommand}" />
                    <Separator></Separator>
                    <MenuItem Header="{Binding BuildingCount}"
                              IsCheckable="True"
                              IsChecked="{Binding StatisticsViewModel.ShowStatisticsBuildingCount}"
                              IsEnabled="{Binding StatisticsViewModel.IsVisible, Mode=OneWay}"
                              Command="{Binding ShowStatisticsBuildingCountCommand}" />
                </MenuItem>
                <MenuItem Header="{Binding Help}"
                          TabIndex="25"
                          HorizontalAlignment="Right">
                    <MenuItem IsEnabled="False">
                        <MenuItem.Header>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat="{}{0}: {1}">
                                        <Binding Path="Version" />
                                        <Binding Path="VersionValue" />
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </MenuItem.Header>
                    </MenuItem>
                    <MenuItem IsEnabled="False">
                        <MenuItem.Header>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat="{}{0}: {1}">
                                        <Binding Path="FileVersion" />
                                        <Binding Path="FileVersionValue" />
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </MenuItem.Header>
                    </MenuItem>
                    <MenuItem IsEnabled="False">
                        <MenuItem.Header>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat="{}{0}: {1}">
                                        <Binding Path="PresetsVersion" />
                                        <Binding Path="PresetsVersionValue" />
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </MenuItem.Header>
                    </MenuItem>
                    <MenuItem Header="{Binding CheckForUpdates}"
                              Command="{Binding CheckForUpdatesCommand}" />
                    <MenuItem Header="{Binding EnableAutomaticUpdateCheck}"
                              IsCheckable="True"
                              IsChecked="{Binding AutomaticUpdateCheck}" />
                    <Separator />
                    <MenuItem Header="{Binding GoToProjectHomepage}"
                              Command="{Binding OpenProjectHomepageCommand}" />
                    <MenuItem Header="{Binding OpenWelcomePage}"
                              Command="{Binding ShowWelcomeWindowCommand}" />
                    <MenuItem Header="{Binding AboutAnnoDesigner}"
                              Command="{Binding ShowAboutWindowCommand}" />
                </MenuItem>
                <Separator />
                <MenuItem Header="{Binding ShowGrid}"
                          IsCheckable="True"
                          IsChecked="{Binding CanvasShowGrid}"
                          TabIndex="26" />
                <MenuItem Header="{Binding ShowLabels}"
                          IsCheckable="True"
                          IsChecked="{Binding CanvasShowLabels}"
                          TabIndex="27" />
                <MenuItem Header="{Binding ShowIcons}"
                          IsCheckable="True"
                          IsChecked="{Binding CanvasShowIcons}"
                          TabIndex="28" />
            </Menu>

            <Grid x:Name="gridMain"
                  Grid.Row="1"
                  Grid.Column="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="17*"
                                      MinWidth="100" />
                    <ColumnDefinition Width="31*" />
                    <ColumnDefinition Width="5" />
                    <ColumnDefinition x:Name="colStatisticsView"
                                      Width="Auto"
                                      MinWidth="100" />
                    <!-- 
                                  MinWidth="100" -->
                </Grid.ColumnDefinitions>

                <my:AnnoCanvas x:Name="annoCanvas"
                               Grid.Column="0"
                               RenderGrid="True"
                               RenderIcon="True"
                               RenderLabel="True"
                               Grid.ColumnSpan="2" />

                <GridSplitter x:Name="splitterStatisticsView"
                              Grid.Column="2"
                              Width="5"
                              VerticalAlignment="Stretch"
                              HorizontalAlignment="Center" />

                <my:StatisticsView x:Name="statisticsView"
                                   Grid.Column="3"
                                   DataContext="{Binding StatisticsViewModel}">
                </my:StatisticsView>

            </Grid>

            <GridSplitter Grid.Row="1"
                          Grid.Column="1"
                          Width="5"
                          VerticalAlignment="Stretch"
                          HorizontalAlignment="Center" />

            <DockPanel Name="BuildingsPanel"
                       Grid.Column="2"
                       Grid.Row="1"
                       LastChildFill="True">
                <GroupBox Header="{Binding BuildingSettingsViewModel.TextHeader}"
                          DockPanel.Dock="Top">
                    <StackPanel>
                        <DockPanel LastChildFill="False"
                                   Height="26">
                            <Label Content="{Binding BuildingSettingsViewModel.TextSize}" />
                            <xctk:IntegerUpDown DockPanel.Dock="Right"
                                                Height="23"
                                                IsEnabled="True"
                                                Width="50"
                                                DefaultValue="4"
                                                DisplayDefaultValueOnEmptyText="True"
                                                Increment="1"
                                                Minimum="1"
                                                TabIndex="1"
                                                Value="{Binding BuildingSettingsViewModel.BuildingHeight}" />
                            <Label Content="x"
                                   DockPanel.Dock="Right" />
                            <xctk:IntegerUpDown DockPanel.Dock="Right"
                                                Height="23"
                                                IsEnabled="True"
                                                Width="50"
                                                DefaultValue="4"
                                                DisplayDefaultValueOnEmptyText="True"
                                                Increment="1"
                                                Minimum="1"
                                                TabIndex="0"
                                                Value="{Binding BuildingSettingsViewModel.BuildingWidth}" />
                        </DockPanel>
                        <DockPanel LastChildFill="False"
                                   Height="26">
                            <Label Content="{Binding BuildingSettingsViewModel.TextColor}" />
                            <xctk:ColorPicker x:Name="colorPicker"
                                              DockPanel.Dock="Right"
                                              Width="140"
                                              TabIndex="2"
                                              DisplayColorAndName="True"
                                              DisplayColorTooltip="True"
                                              ShowDropDownButton="True"
                                              ShowAvailableColors="True"
                                              ShowRecentColors="True"
                                              AvailableColorsSortingMode="HueSaturationBrightness"
                                              StandardButtonHeader="{Binding BuildingSettingsViewModel.TextStandard}"
                                              AdvancedButtonHeader="{Binding BuildingSettingsViewModel.TextAdvanced}"
                                              AvailableColorsHeader="{Binding BuildingSettingsViewModel.TextAvailableColors}"
                                              StandardColorsHeader="{Binding BuildingSettingsViewModel.TextStandardColors}"
                                              RecentColorsHeader="{Binding BuildingSettingsViewModel.TextRecentColors}"
                                              SelectedColor="{Binding BuildingSettingsViewModel.SelectedColor}" />
                        </DockPanel>
                        <DockPanel LastChildFill="False"
                                   Height="26">
                            <!--<Button Width="32"
                                    DockPanel.Dock="Right"
                                    Command="{Binding BuildingSettingsViewModel.ApplyColorToSelectionCommand}"
                                    ToolTip="{Binding BuildingSettingsViewModel.TextApplyColorToSelectionToolTip}">
                                <Button.Resources>
                                    <Style x:Key="stylePath"
                                           TargetType="{x:Type Path}">
                                        <Style.Triggers>
                                            <Trigger Property="IsEnabled"
                                                     Value="True">
                                                <Setter Property="Fill"
                                                        Value="#FF000000" />
                                            </Trigger>
                                            <Trigger Property="IsEnabled"
                                                     Value="False">
                                                <Setter Property="Fill"
                                                        Value="Gray" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Resources>
                                <Button.Content>
                                    <Grid Width="24"
                                          Height="24"
                                          Visibility="Visible">
                                        <Path Data="M10.237976,16.558633L15.362,21.68467C15.362,21.68467 15.362,32.671771 0,30.001748 3.9839783,29.020736 3.5959778,25.791718 5.9639893,20.122661 7.1269836,17.340638 10.237976,16.558633 10.237976,16.558633z M30.389984,0.00048406667C30.752991,0.0094867014 31.134979,0.14547426 31.494995,0.50648519 32.77597,1.7864956 31.215973,3.3455154 31.215973,3.3455152 31.215973,3.3455154 23.415985,11.147588 21.855988,12.708591 20.296997,14.270602 18.406982,18.619656 18.406982,18.619656L13.28299,13.495602C13.28299,13.495602 17.733978,11.707591 19.29599,10.147579 20.855988,8.5855531 28.655975,0.78248873 28.655975,0.78248861 28.655975,0.78248873 29.461975,-0.022526528 30.389984,0.00048406667z"
                                              Stretch="Uniform"
                                              Width="16"
                                              Height="16"
                                              Margin="0,0,0,0"
                                              RenderTransformOrigin="0.5,0.5"
                                              Style="{StaticResource stylePath}">
                                            <Path.RenderTransform>
                                                <TransformGroup>
                                                    <TransformGroup.Children>
                                                        <RotateTransform Angle="0" />
                                                        <ScaleTransform ScaleX="1"
                                                                        ScaleY="1" />
                                                    </TransformGroup.Children>
                                                </TransformGroup>
                                            </Path.RenderTransform>
                                        </Path>
                                    </Grid>
                                </Button.Content>
                            </Button>-->
                            <!-- used when predefined colors are available -->
                            <xctk:SplitButton Width="48"
                                              DockPanel.Dock="Right"
                                              Command="{Binding BuildingSettingsViewModel.ApplyColorToSelectionCommand}"
                                              ToolTip="{Binding BuildingSettingsViewModel.TextApplyColorToSelectionToolTip}">
                                <xctk:SplitButton.Resources>
                                    <Style x:Key="stylePath"
                                           TargetType="{x:Type Path}">
                                        <Style.Triggers>
                                            <Trigger Property="IsEnabled"
                                                     Value="True">
                                                <Setter Property="Fill"
                                                        Value="#FF000000" />
                                            </Trigger>
                                            <Trigger Property="IsEnabled"
                                                     Value="False">
                                                <Setter Property="Fill"
                                                        Value="Gray" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </xctk:SplitButton.Resources>
                                <xctk:SplitButton.Content>
                                    <Grid Width="24"
                                          Height="24"
                                          Visibility="Visible">
                                        <Path Data="M10.237976,16.558633L15.362,21.68467C15.362,21.68467 15.362,32.671771 0,30.001748 3.9839783,29.020736 3.5959778,25.791718 5.9639893,20.122661 7.1269836,17.340638 10.237976,16.558633 10.237976,16.558633z M30.389984,0.00048406667C30.752991,0.0094867014 31.134979,0.14547426 31.494995,0.50648519 32.77597,1.7864956 31.215973,3.3455154 31.215973,3.3455152 31.215973,3.3455154 23.415985,11.147588 21.855988,12.708591 20.296997,14.270602 18.406982,18.619656 18.406982,18.619656L13.28299,13.495602C13.28299,13.495602 17.733978,11.707591 19.29599,10.147579 20.855988,8.5855531 28.655975,0.78248873 28.655975,0.78248861 28.655975,0.78248873 29.461975,-0.022526528 30.389984,0.00048406667z"
                                              Stretch="Uniform"
                                              Width="16"
                                              Height="16"
                                              Margin="0,0,0,0"
                                              RenderTransformOrigin="0.5,0.5"
                                              Style="{StaticResource stylePath}">
                                            <Path.RenderTransform>
                                                <TransformGroup>
                                                    <TransformGroup.Children>
                                                        <RotateTransform Angle="0" />
                                                        <ScaleTransform ScaleX="1"
                                                                        ScaleY="1" />
                                                    </TransformGroup.Children>
                                                </TransformGroup>
                                            </Path.RenderTransform>
                                        </Path>
                                    </Grid>
                                </xctk:SplitButton.Content>
                                <xctk:SplitButton.DropDownContent>
                                    <Button Command="{Binding BuildingSettingsViewModel.ApplyPredefinedColorToSelectionCommand}"
                                            Content="{Binding BuildingSettingsViewModel.TextApplyPredefinedColorToSelection}"
                                            ToolTip="{Binding BuildingSettingsViewModel.TextApplyPredefinedColorToSelectionToolTip}" />
                                </xctk:SplitButton.DropDownContent>
                            </xctk:SplitButton>
                        </DockPanel>
                        <DockPanel>
                            <DockPanel.Resources>
                                <Style x:Key="styleRectangle"
                                       TargetType="{x:Type Rectangle}">
                                    <Setter Property="Margin"
                                            Value="2" />
                                </Style>
                            </DockPanel.Resources>
                            <Expander Header="{Binding BuildingSettingsViewModel.TextColorsInLayout}"
                                      MaxWidth="{Binding ElementName=BuildingsPanel, Path=ActualWidth, Mode=OneWay}"
                                      MaxHeight="90"
                                      IsExpanded="False"
                                      Visibility="{Binding BuildingSettingsViewModel.ShowColorsInLayout, Converter={StaticResource converterBoolToVisibility}}"
                                      ToolTip="{Binding BuildingSettingsViewModel.TextColorsInLayoutToolTip}">
                                <ScrollViewer VerticalScrollBarVisibility="Auto">
                                    <ItemsControl ItemsSource="{Binding BuildingSettingsViewModel.ColorsInLayout}">
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <Rectangle Fill="{Binding MediaColor, Converter={StaticResource converterColorToSolidColorBrush}}"
                                                           Style="{StaticResource styleRectangle}"
                                                           Stroke="#FFABADB3"
                                                           StrokeThickness="1"
                                                           ToolTip="{Binding}">
                                                    <Rectangle.InputBindings>
                                                        <MouseBinding Gesture="LeftDoubleClick"
                                                                      Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}, Path=DataContext.BuildingSettingsViewModel.UseColorInLayoutCommand}"
                                                                      CommandParameter="{Binding}" />
                                                    </Rectangle.InputBindings>
                                                </Rectangle>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <WrapPanel Orientation="Horizontal"
                                                           HorizontalAlignment="Right"
                                                           ItemHeight="20"
                                                           ItemWidth="20"
                                                           Margin="0" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                </ScrollViewer>
                            </Expander>
                        </DockPanel>
                        <DockPanel LastChildFill="False"
                                   Height="26">
                            <Label Content="{Binding BuildingSettingsViewModel.TextBuildingName}" />
                            <TextBox DockPanel.Dock="Right"
                                     Height="23"
                                     IsEnabled="True"
                                     Text="{Binding BuildingSettingsViewModel.BuildingName}"
                                     Width="140"
                                     TabIndex="4" />
                            <TextBox DockPanel.Dock="Right"
                                     Height="10"
                                     IsEnabled="False"
                                     Text="{Binding BuildingSettingsViewModel.BuildingIdentifier}"
                                     Visibility="Collapsed"
                                     Width="140" />
                        </DockPanel>
                        <DockPanel LastChildFill="False"
                                   Height="46">
                            <Label Content="{Binding BuildingSettingsViewModel.TextIcon}"
                                   VerticalAlignment="Center" />
                            <ComboBox x:Name="comboBoxIcon"
                                      DockPanel.Dock="Right"
                                      Width="140"
                                      Height="46"
                                      IsEnabled="True"
                                      ItemsSource="{Binding AvailableIcons}"
                                      SelectedItem="{Binding SelectedIcon}"
                                      TabIndex="6"
                                      TextSearch.TextPath="DisplayName"
                                      ScrollViewer.CanContentScroll="True">
                                <ComboBox.Resources>
                                    <Style TargetType="{x:Type Popup}">
                                        <!--<Setter Property="MinWidth"
                                                Value="140" />
                                        <Setter Property="MaxWidth"
                                                Value="340" />-->
                                        <Setter Property="Width"
                                                Value="300" />
                                    </Style>
                                </ComboBox.Resources>
                                <ComboBox.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <VirtualizingStackPanel VirtualizingStackPanel.IsVirtualizing="True"
                                                                VirtualizingStackPanel.VirtualizationMode="Recycling" />
                                    </ItemsPanelTemplate>
                                </ComboBox.ItemsPanel>
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <Viewbox Margin="5">
                                                <Image Width="23"
                                                       Height="23"
                                                       Source="{Binding Icon}" />
                                            </Viewbox>
                                            <TextBlock Margin="0,5,5,5"
                                                       VerticalAlignment="Center"
                                                       Text="{Binding DisplayName}" />
                                        </StackPanel>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </DockPanel>
                        <DockPanel LastChildFill="False"
                                   Height="26">
                            <Label Content="{Binding BuildingSettingsViewModel.TextInfluenceType}" />
                            <ComboBox DockPanel.Dock="Right"
                                      Width="140"
                                      Height="22"
                                      IsEnabled="True"
                                      ItemsSource="{Binding BuildingSettingsViewModel.BuildingInfluences}"
                                      SelectedItem="{Binding BuildingSettingsViewModel.SelectedBuildingInfluence}"
                                      DisplayMemberPath="Name"
                                      TabIndex="6" />
                        </DockPanel>
                        <DockPanel LastChildFill="False"
                                   Height="26"
                                   Visibility="{Binding BuildingSettingsViewModel.IsBuildingInfluenceInputRadiusVisible, Converter={StaticResource converterBoolToVisibilityCollapsed}}">
                            <Label Content="{Binding BuildingSettingsViewModel.TextRadius}" />
                            <xctk:DoubleUpDown DockPanel.Dock="Right"
                                               Height="23"
                                               Width="140"
                                               IsEnabled="True"
                                               DefaultValue="0"
                                               DisplayDefaultValueOnEmptyText="True"
                                               Increment="1"
                                               Minimum="0"
                                               TabIndex="8"
                                               Value="{Binding BuildingSettingsViewModel.BuildingRadius}" />
                        </DockPanel>
                        <DockPanel LastChildFill="False"
                                   Height="26"
                                   Visibility="{Binding BuildingSettingsViewModel.IsBuildingInfluenceInputRangeVisible, Converter={StaticResource converterBoolToVisibilityCollapsed}}">
                            <Label Content="{Binding BuildingSettingsViewModel.TextDistance}" />
                            <xctk:DoubleUpDown DockPanel.Dock="Right"
                                               Height="23"
                                               Width="140"
                                               IsEnabled="True"
                                               DefaultValue="0"
                                               DisplayDefaultValueOnEmptyText="True"
                                               Increment="1"
                                               Minimum="0"
                                               AllowSpin="True"
                                               TabIndex="9"
                                               Value="{Binding BuildingSettingsViewModel.BuildingInfluenceRange}" />
                        </DockPanel>
                        <DockPanel LastChildFill="False"
                                   Height="25"
                                   Visibility="{Binding BuildingSettingsViewModel.IsBuildingInfluenceInputRangeVisible, Converter={StaticResource converterBoolToVisibilityCollapsed}}">
                            <CheckBox DockPanel.Dock="Right"
                                      Margin="0,3,0,5"
                                      IsThreeState="False"
                                      Content="{Binding BuildingSettingsViewModel.TextPavedStreet}"
                                      IsChecked="{Binding BuildingSettingsViewModel.IsPavedStreet}"
                                      ToolTip="{Binding BuildingSettingsViewModel.TextPavedStreetToolTip}">
                                <CheckBox.Style>
                                    <Style TargetType="{x:Type CheckBox}">
                                        <Setter Property="Background"
                                                Value="Green" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding BuildingSettingsViewModel.IsPavedStreet}"
                                                         Value="True">
                                                <Setter Property="Background"
                                                        Value="OrangeRed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </CheckBox.Style>
                            </CheckBox>
                        </DockPanel>
                        <DockPanel LastChildFill="False">
                            <Label Content="{Binding BuildingSettingsViewModel.TextOptions}" />
                            <StackPanel Orientation="Vertical"
                                        DockPanel.Dock="Right">
                                <CheckBox Content="{Binding BuildingSettingsViewModel.TextEnableLabel}"
                                          Margin="0,5,0,5"
                                          VerticalAlignment="Center"
                                          TabIndex="9"
                                          IsThreeState="False"
                                          IsChecked="{Binding BuildingSettingsViewModel.IsEnableLabelChecked}" />
                                <CheckBox Content="{Binding BuildingSettingsViewModel.TextBorderless}"
                                          Margin="0,0,0,5"
                                          VerticalAlignment="Center"
                                          TabIndex="10"
                                          IsThreeState="False"
                                          IsChecked="{Binding BuildingSettingsViewModel.IsBorderlessChecked}" />
                                <CheckBox Content="{Binding BuildingSettingsViewModel.TextRoad}"
                                          Margin="0,0,0,5"
                                          VerticalAlignment="Center"
                                          TabIndex="11"
                                          IsThreeState="False"
                                          IsChecked="{Binding BuildingSettingsViewModel.IsRoadChecked}" />
                            </StackPanel>
                        </DockPanel>
                        <Button Content="{Binding BuildingSettingsViewModel.TextPlaceBuilding}"
                                Command="{Binding PlaceBuildingCommand}"
                                Height="23"
                                TabIndex="12" />
                    </StackPanel>
                </GroupBox>

                <GroupBox x:Name="GroupBoxSearchPresets"
                          Header="{Binding PresetsTreeSearchViewModel.TextSearch}"
                          HeaderStringFormat=" {0}:"
                          IsEnabled="True"
                          Height="Auto"
                          HorizontalAlignment="Stretch"
                          DockPanel.Dock="Top">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TextBox x:Name="TextBoxSearchPresets"
                                 Grid.Column="0"
                                 Grid.Row="0"
                                 Height="23"
                                 VerticalContentAlignment="Center"
                                 ToolTip="{Binding PresetsTreeSearchViewModel.TextSearchToolTip}"
                                 Text="{Binding PresetsTreeSearchViewModel.SearchText, UpdateSourceTrigger=PropertyChanged}"
                                 KeyUp="TextBoxSearchPresetsKeyUp">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="GotFocus">
                                    <i:InvokeCommandAction Command="{Binding PresetsTreeSearchViewModel.GotFocusCommand}" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="LostFocus">
                                    <i:InvokeCommandAction Command="{Binding PresetsTreeSearchViewModel.LostFocusCommand}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <!--<i:Interaction.Behaviors>
                                <myBehaviors:FixCaretIndexBehavior />
                            </i:Interaction.Behaviors>-->
                            <TextBox.InputBindings>
                                <KeyBinding Key="Esc"
                                            Command="{Binding PresetsTreeSearchViewModel.ClearSearchTextCommand}"
                                            CommandParameter="{Binding ElementName=TextBoxSearchPresets}" />
                            </TextBox.InputBindings>
                        </TextBox>
                        <!-- Maybe add a clear text box button eventually. (Needs styling etc)-->
                        <!--<Button Grid.Column="1"
                            Content="X"
                            Height="20"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Margin="0,0,2,0"
                            Background="Transparent"
                            BorderThickness="0"
                            />-->
                        <xctk:CheckComboBox Grid.Column="0"
                                            Grid.Row="1"
                                            IsEditable="False"
                                            Visibility="Visible"
                                            ItemsSource="{Binding PresetsTreeSearchViewModel.GameVersionFilters}"
                                            DisplayMemberPath="Name"
                                            SelectedMemberPath="IsSelected"
                                            Delimiter=", "
                                            Command="{Binding PresetsTreeSearchViewModel.GameVersionFilterChangedCommand}"
                                            IsSelectAllActive="True"
                                            SelectAllContent="{Binding PresetsTreeSearchViewModel.TextSelectAll}" />
                    </Grid>
                </GroupBox>

                <GroupBox x:Name="GroupBoxPresets"
                          Header="{Binding PresetsSectionHeader}"
                          IsEnabled="True"
                          Width="{Binding ElementName=BuildingsPanel, Path=ActualWidth, Mode=OneWay}"
                          DockPanel.Dock="Top">
                    <TreeView x:Name="PresetsTree"
                              ItemsSource="{Binding PresetsTreeViewModel.FilteredItems}">
                        <!-- virtualization brings the SelectedItem out of view
                        VirtualizingStackPanel.IsVirtualizing="True"
                              VirtualizingStackPanel.VirtualizationMode="Recycling"-->
                        <TreeView.InputBindings>
                            <KeyBinding Command="{Binding PresetsTreeViewModel.ReturnKeyPressedCommand}"
                                        Key="Return"
                                        CommandParameter="{Binding SelectedItem, ElementName=PresetsTree}" />
                        </TreeView.InputBindings>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseDoubleClick">
                                <i:InvokeCommandAction Command="{Binding PresetsTreeViewModel.DoubleClickCommand}"
                                                       CommandParameter="{Binding SelectedItem, ElementName=PresetsTree}" />
                            </i:EventTrigger>
                            <!--<i:EventTrigger EventName="SelectedItemChanged">
                                <i:InvokeCommandAction Command="{Binding PresetsTreeViewModel.SelectedItemChangedCommand}"
                                                       CommandParameter="{Binding SelectedItem, ElementName=PresetsTree}" />
                            </i:EventTrigger>-->
                        </i:Interaction.Triggers>
                        <TreeView.Resources>
                            <HierarchicalDataTemplate DataType="{x:Type modelPresetsTree:GameHeaderTreeItem}"
                                                      ItemsSource="{Binding Children}">
                                <TextBlock Text="{Binding Header}"
                                           FontWeight="SemiBold" />
                            </HierarchicalDataTemplate>
                            <HierarchicalDataTemplate DataType="{x:Type modelPresetsTree:GenericTreeItem}"
                                                      ItemsSource="{Binding Children}">
                                <TextBlock Text="{Binding Header}" />
                            </HierarchicalDataTemplate>
                        </TreeView.Resources>
                        <TreeView.ItemContainerStyle>
                            <Style TargetType="{x:Type TreeViewItem}">
                                <Setter Property="IsExpanded"
                                        Value="{Binding IsExpanded, Mode=TwoWay}" />
                                <Setter Property="Visibility"
                                        Value="{Binding IsVisible, Mode=TwoWay, Converter={StaticResource converterBoolToVisibilityCollapsed}}" />
                                <Setter Property="IsSelected"
                                        Value="{Binding IsSelected, Mode=TwoWay}" />
                            </Style>
                        </TreeView.ItemContainerStyle>
                    </TreeView>
                </GroupBox>
            </DockPanel>
            <StatusBar Grid.Row="2"
                       Grid.ColumnSpan="3">
                <StatusBarItem Content="{Binding StatusBarControls}" />
                <StatusBarItem Content="{Binding StatusMessage}"
                               Margin="10,0,0,0" />
                <StatusBarItem Content="{Binding StatusMessageClipboard}"
                               Margin="10,0,0,0"
                               HorizontalAlignment="Right" />
            </StatusBar>
        </Grid>
    </xctk:BusyIndicator>
</Window>